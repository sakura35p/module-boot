pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        mavenCentral()
    }
}

rootProject.name = "seed"

include(":bootstrap")
include(":security")

fileTree(dir: 'client', include: '**/build.gradle').each { file ->
    // 루트 디렉토리 기준으로 상대 경로 계산
    def relativePath = rootDir.toPath().relativize(file.parentFile.toPath()).toString()
    // 슬래시/역슬래시를 콜론(:)으로 변환 (Windows 및 Unix 호환)
    def modulePath = relativePath.replaceAll(/[\/\\]/, ':')
    // 프로젝트 경로가 유효한 경우 포함
    if (modulePath && !modulePath.startsWith('.') && !modulePath.endsWith('.')) {
        include ":$modulePath" // 콜론 접두사 추가
    }
}

fileTree(dir: 'domain', include: '**/build.gradle').each { file ->
    // 루트 디렉토리 기준으로 상대 경로 계산
    def relativePath = rootDir.toPath().relativize(file.parentFile.toPath()).toString()
    // 슬래시/역슬래시를 콜론(:)으로 변환 (Windows 및 Unix 호환)
    def modulePath = relativePath.replaceAll(/[\/\\]/, ':')
    // 프로젝트 경로가 유효한 경우 포함
    if (modulePath && !modulePath.startsWith('.') && !modulePath.endsWith('.')) {
        include ":$modulePath" // 콜론 접두사 추가
    }
}

fileTree(dir: 'infrastructure', include: '**/build.gradle').each { file ->
    // 루트 디렉토리 기준으로 상대 경로 계산
    def relativePath = rootDir.toPath().relativize(file.parentFile.toPath()).toString()
    // 슬래시/역슬래시를 콜론(:)으로 변환 (Windows 및 Unix 호환)
    def modulePath = relativePath.replaceAll(/[\/\\]/, ':')
    // 프로젝트 경로가 유효한 경우 포함
    if (modulePath && !modulePath.startsWith('.') && !modulePath.endsWith('.')) {
        include ":$modulePath" // 콜론 접두사 추가
    }
}