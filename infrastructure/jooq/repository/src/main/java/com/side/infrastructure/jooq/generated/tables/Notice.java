/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated.tables;


import com.side.infrastructure.jooq.generated.Keys;
import com.side.infrastructure.jooq.generated.TestDb;
import com.side.infrastructure.jooq.generated.tables.records.NoticeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Notice extends TableImpl<NoticeRecord> {

    /**
     * The reference instance of <code>test_db.notice</code>
     */
    public static final Notice NOTICE = new Notice();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>test_db.notice.dislikes</code>.
     */
    public final TableField<NoticeRecord, Integer> DISLIKES = createField(DSL.name("dislikes"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>test_db.notice.likes</code>.
     */
    public final TableField<NoticeRecord, Integer> LIKES = createField(DSL.name("likes"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>test_db.notice.created_at</code>.
     */
    public final TableField<NoticeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");
    /**
     * The column <code>test_db.notice.id</code>.
     */
    public final TableField<NoticeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false)
                                                                                                   .identity(true), this, "");
    /**
     * The column <code>test_db.notice.modified_at</code>.
     */
    public final TableField<NoticeRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");
    /**
     * The column <code>test_db.notice.created_by</code>.
     */
    public final TableField<NoticeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(30), this, "");
    /**
     * The column <code>test_db.notice.modified_by</code>.
     */
    public final TableField<NoticeRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(30), this, "");
    /**
     * The column <code>test_db.notice.title</code>.
     */
    public final TableField<NoticeRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(30), this, "");
    /**
     * The column <code>test_db.notice.contents</code>.
     */
    public final TableField<NoticeRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.CLOB, this, "");

    private Notice(Name alias, Table<NoticeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Notice(Name alias, Table<NoticeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>test_db.notice</code> table reference
     */
    public Notice(String alias) {
        this(DSL.name(alias), NOTICE);
    }

    /**
     * Create an aliased <code>test_db.notice</code> table reference
     */
    public Notice(Name alias) {
        this(alias, NOTICE);
    }

    /**
     * Create a <code>test_db.notice</code> table reference
     */
    public Notice() {
        this(DSL.name("notice"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticeRecord> getRecordType() {
        return NoticeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TestDb.TEST_DB;
    }

    @Override
    public Identity<NoticeRecord, Long> getIdentity() {
        return (Identity<NoticeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NoticeRecord> getPrimaryKey() {
        return Keys.KEY_NOTICE_PRIMARY;
    }

    @Override
    public Notice as(String alias) {
        return new Notice(DSL.name(alias), this);
    }

    @Override
    public Notice as(Name alias) {
        return new Notice(alias, this);
    }

    @Override
    public Notice as(Table<?> alias) {
        return new Notice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notice rename(String name) {
        return new Notice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notice rename(Name name) {
        return new Notice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notice rename(Table<?> name) {
        return new Notice(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notice where(Condition condition) {
        return new Notice(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notice where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notice where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notice where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notice where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notice where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notice where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notice where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notice whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notice whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
